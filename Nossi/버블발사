#define MOVE_LEFT 100
#define MOVE_RIGHT 200

typedef struct
{
    int x;
    int y;
} Pos;
void init(int width, int height);
int shoot(int bubbleType, int direction);
void move(int direction);
bool checkNear(Pos);
int howMany();
int map[22][12];
int shooterY; // 1~width까지
int Bwidth;
int Bheight;
int dx[8] = {0, 0, 1, 1, 1, -1, -1, -1};
int dy[8] = {1, -1, 0, 1, -1, 0, 1, -1};
Pos bubble;


void init(int width, int height)
{
    for (int i = 0; i <= width + 1; i++)
        map[0][i] = -1;
    for (int i = 0; i <= width + 1; i++)
        map[height + 1][i] = -1;
    for (int i = 1; i <= height; i++)
    {
        map[i][0] = -1;
        map[i][width + 1] = -1;
        for (int j = 1; j <= width; j++)
        {
            map[i][j] = 0;
        }
    }

    shooterY = 1;
    Bwidth = width;
    Bheight = height;
    bubble.x = height + 1;
}
int shoot(int bubbleType, int direction)
{
    bubble.y = shooterY;
    bubble.x = Bheight + 1;

    if (shooterY == 1 && direction == 0)
        return howMany();
    else if (shooterY == Bwidth && direction == 2)
        return howMany();
    else
    {
        while (1)
        {
            switch (direction)
            {
            case 0:

                bubble.x--;
                bubble.y--;
                if (bubble.y == 1) // 왼쪽벽에 부딪힌경우
                    direction = 2;
                break;
            case 1:
                bubble.x--;
                break;
            case 2:
                bubble.x--;
                bubble.y++;
                if (bubble.y == Bwidth) // 오른쪽벽에 부딪힌경우
                    direction = 0;
                break;
            }

            // 버블이랑 인접하거나 천장까지 도달했다면 break해주면 될듯!
            if (checkNear(bubble) || bubble.x == 1)
            {
                map[bubble.x][bubble.y] = bubbleType;
                break;
            }
        }
    }
    return howMany();
}
void move(int d)
{
    if (d == MOVE_LEFT && shooterY > 1)
        shooterY--;
    if (d == MOVE_RIGHT && shooterY < Bwidth)
        shooterY++;
    return;
}

bool checkNear(Pos bubble)
{
    for (int i = 0; i < 8; i++)
    {
        Pos near;
        near.x = bubble.x + dx[i];
        near.y = bubble.y + dy[i];
        if (map[near.x][near.y] == -1)
            continue;
        else if (map[near.x][near.y] != 0)
            return true;
    }
    return false;
}
int howMany()
{
    int count = 0;
    for (int i = 1; i <= Bheight; i++)
    {
        for (int j = 1; j <= Bwidth; j++)
        {

            if (map[i][j] != 0)
                count++;
        }
    }
    return count;
}
